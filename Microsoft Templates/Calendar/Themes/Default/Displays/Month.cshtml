@{
    // Store some time variables for our timezone
    var now = Time.NowInLocal;

    // Get the request variables (query string)
    // If they were set, store them in the session

    if (!Request["year"].IsEmpty()) {
        Session["Year"] = Request["year"].AsInt();
    }
    if (!Request["month"].IsEmpty()) {
        Session["Month"] = Request["month"].AsInt();
    }

    // Get the year, if there is nothing in the session, we want the current stuff
    int year = Session["Year"] != null ? (int)Session["Year"] : now.Year;
    int month = Session["Month"] != null ? (int)Session["Month"] : now.Month;

    // Get the first day of the month
    var firstDayOfMonth = new DateTime(year, month, 1);

    var previousMonth = firstDayOfMonth.AddDays(-1);
    var daysInPreviousMonth = DateTime.DaysInMonth(previousMonth.Year, previousMonth.Month);

    var numberOfDaysInMonth = DateTime.DaysInMonth(year, month);

    // This is midnight morning of the first day of next month: 4/1/2010 12:00:00 AM
    var lastDayOfMonth = firstDayOfMonth.AddDays(numberOfDaysInMonth);

    var dayOfWeek = firstDayOfMonth.DayOfWeek;

    // Number of blank cells we need
    var numBlankCells =  (int)dayOfWeek;

    // We use this to know when to make a new row (%7)
    var dayCounter = 1;

    // What day of the month are we on.
    var dayNumber = 1;

    var db = UserHelper.DatabaseInstance;

    var events = db.Query(@"SELECT
                            e.Id, e.Name, e.AllDay, e.Start, e.[End], cu.Color
                            FROM Events AS e
                            JOIN Calendars AS c ON e.CalendarID = c.Id
                            JOIN CalendarsUsers AS cu ON c.Id = cu.CalendarId
                            JOIN Users AS u ON cu.UserId = u.Id
                            WHERE u.Id = @0
                            AND e.Start >= @1
                            AND e.[End] <= @2",
                        WebSecurity.CurrentUserId,
                        firstDayOfMonth,
                        lastDayOfMonth
                        );

    var dayGroups =
        (from dynamic e in (IEnumerable<object>)events
        group e by Time.UtcToLocal(e.Start).Date into g
        orderby g.Key
        select new { 
            Date = g.Key, 
            Events = g.OrderByDescending(e => e.AllDay).ThenBy(e => e.Start)
        }).ToDictionary(g => g.Date.Day);

    var dayGroupIndex = 0;
}

<table class="month-view">
    <caption>
        <a href="?year=@(previousMonth.Year)&amp;month=@(previousMonth.Month)" title="Previous Month">&laquo;</a>
        @firstDayOfMonth.ToString("MMMM")
        <a href="?year=@(lastDayOfMonth.Year)&amp;month=@(lastDayOfMonth.Month)" title="Next Month">&raquo;</a>
        <span style="float: right"><a href="?year=@(now.Year)&amp;month=@(now.Month)">Today</a></span>
    </caption>
    <thead>
        <tr>
            <th scope="col">Sun</th>
            <th scope="col">Mon</th>
            <th scope="col">Tue</th>
            <th scope="col">Wed</th>
            <th scope="col">Thu</th>
            <th scope="col">Fri</th>
            <th scope="col">Sat</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            @* Print out all of the blanks so we start on the right day*@
            @for (int i = numBlankCells-1; i >= 0; i--) {
                <td class="inactive">
                    <span class="day-number">
                        @(daysInPreviousMonth-i)
                    </span>
                </td>
                dayCounter++;
            }

            @* Go through every day in this month *@
            @while (dayNumber <= numberOfDaysInMonth) {
                string className = "";
                if (dayNumber == now.Day && year == now.Year && month == now.Month) {
                    className = "today";
                }
                <td class="@className">
                    <span class="day-number">@dayNumber</span>                

                    @* If our set of days contains events for the current day *@
                    @if (dayGroups.ContainsKey(dayNumber)) {
                        @RenderPage(Themes.GetResourcePath("Partials", "DayList.cshtml"), dayGroups[dayNumber].Events, false)
                        dayGroupIndex++;
                    }

                </td>
                dayCounter++;
                dayNumber++;
                @* If we are at the end of the week, go to the next row *@
                if (dayCounter % 8 == 0 && dayNumber -1 != numberOfDaysInMonth) {
                    @:</tr><tr>
                    dayCounter++;
                }
            }
            @* Finish this week display *@
            @{
                dayNumber = 1;
                while (dayCounter % 8 > 1 && dayCounter %8 <= 7) {
                    <td class="inactive">
                       <span class="day-number">@dayNumber</span>
                    </td>
                    dayNumber++;
                    dayCounter++;
                }
            }
        </tr>
    </tbody>
</table>